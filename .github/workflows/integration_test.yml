name: Integration Test using Jest, supertest and postgres

# Controls when the workflow will run
on:
  pull_request:
    types: [opened, synchronize, closed]

jobs:
  # Label of the container job
  integration-tests-on-pr-opened:
    # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.merged != true  }}

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # Downloads a copy of the code in your repository before running CI tests
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Setup Node.js environment
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      # Performs an installation of all dependencies in the `package.json` file
      # For more information, see https://docs.npmjs.com/cli/ci.html
      - name: Install dependencies
        run: npm install

      - name: Run integration tests
        run: npm test
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DATABASE: postgres
          POSTGRES_USERNAME: postgres
          POSTGRES_PASSWORD: postgres

  integration-tests-on-pr-merged:
    # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main' }}

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # Downloads a copy of the code in your repository before running CI tests
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Setup Node.js environment
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      # Performs an installation of all dependencies in the `package.json` file
      # For more information, see https://docs.npmjs.com/cli/ci.html
      - name: Install dependencies
        run: npm install

      - name: Run integration tests
        run: npm test
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DATABASE: postgres
          POSTGRES_USERNAME: postgres
          POSTGRES_PASSWORD: postgres
